{"version":3,"sources":["component/Subject.js","component/TOC.js","component/Content.js","App.js","serviceWorker.js","index.js"],"names":["Subject","console","log","react_default","a","createElement","href","onClick","e","preventDefault","this","props","onChangePage","bind","title","sub","Component","TOC","lists","data","i","length","push","key","id","data-skdjfnsdkfj","Content","desc","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","mode","welcome","selected_content_id","subject","content","_title","_desc","className","component_Subject","setState","component_TOC","Number","component_Content","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5e62f437.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\n//컴포넌트(사용자정의 테그)를 만드는 코드영역\nclass Subject extends Component{\n    //class 안에서는 function을 생략할 수 있다.\n    render(){\n      console.log('sub render');\n      return(\n        <header>  \n          <h1><a href =\"/\" onClick={function(e){\n            e.preventDefault();\n            this.props.onChangePage();\n          }.bind(this)}>{this.props.title}</a></h1>\n          {this.props.sub}\n        </header>\n      );\n    }\n  }\n\n  export default Subject;\n  ","import React, {Component} from 'react';  \n\nclass TOC extends Component{\n    render(){\n      console.log('TOC render');\n      var lists=[];\n      var data = this.props.data;\n      var i=0;\n      while(i<data.length){\n        lists.push(<li key={data[i].id}>\n          <a href={\"/content/\"+data[i].id}\n            data-skdjfnsdkfj = {data[i].id}\n\n            onClick={function(id,e){\n              e.preventDefault();\n              this.props.onChangePage(id);\n            }.bind(this, data[i].id)}\n          > {data[i].title}\n          </a> </li>);\n        i = i+1;\n      }\n      return(\n        <nav>\n          <ul>\n            {lists}\n          </ul>\n        </nav>\n      );\n    }\n  }\n\n  export default TOC;","import React, {Component} from 'react';\n\n//컴포넌트(사용자정의 테그)를 만드는 코드영역\nclass Content extends Component{\n    //class 안에서는 function을 생략할 수 있다.\n    render(){\n      console.log('app render');\n      return(\n        <article>\n          <h2>{this.props.title}</h2>\n          {this.props.desc}\n        </article>\n      );\n    }\n  }\n  export default Content;","import React, {Component} from 'react';\nimport './App.css';\n\nimport Subject from \"./component/Subject\"\nimport TOC from \"./component/TOC\"\nimport Content from \"./component/Content\"\n\n\nclass App extends Component{\n  constructor(props){ \n    super(props); \n    this.state={\n      mode :\"read\", \n      welcome : {title:'welcome', desc:'hello react'},\n\n      selected_content_id : 1,\n\n      subject:{title:'WEB', sub:'world wide web !'},\n      content:[\n        {id:1, title:\"HTML\", desc:\"HTML is HyperText \"},\n        {id:2, title:\"CSS\", desc:\"Css is for design \"},\n        {id:3, title:\"JS\", desc:\"javascript is for intrective \"}\n      ]\n    }\n  }\n\n  render(){\n    console.log('APP render & this is : ' , this);\n    var _title, _desc = null;\n    if(this.state.mode === 'welcome'){\n      _title=this.state.welcome.title;\n      _desc=this.state.welcome.desc;\n    }else if(this.state.mode === 'read'){\n      var i =0;\n      while(i<this.state.content.length){\n        var data = this.state.content[i];\n        if(data.id === this.state.selected_content_id){\n          _title=data.title;\n          _desc=data.desc;\n          break;\n        }\n        i++; \n      }\n    }\n    \n    return (\n      <div className=\"App\">\n\n        <Subject \n          title={this.state.subject.title} \n          sub={this.state.subject.sub}\n\n          onChangePage={function(){\n            this.setState({\n              mode:'welcome'\n            });\n          }.bind(this)}\n          >\n        </Subject>\n\n         <TOC data={this.state.content}\n          onChangePage={function(id){\n            this.setState({\n              mode : 'read',\n              selected_content_id : Number(id)\n            })\n          }.bind(this)}\n         ></TOC>\n\n         <Content title={_title} desc={_desc}></Content>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}